- name: users | tg | create group
  tags: groups,tg,users
  become_user: "{{ username }}"
  group:
    name: wheel
    state: present

- name: users | tg | create user
  tags: tg,sudo,users
  # ansible.builtin.debug:
  #   var: mypassword
  vars:
    mypassword: "{{ lookup('community.general.passwordstore', 'ansible/workstation/tg missing=empty length=32 nosymbols=true') | default('123456', true) }}"
    # mypassword: "{{ lookup('community.general.passwordstore', 'ansible/workstation/tg missing=create length=32 nosymbols=true')}}"
  user:
    name: tg
    group: tg
    groups: wheel,users,{{ sudo_group }}
    state: present
    comment: "Thomas Groch"
    password: "{{ tg_passwd }}"
    shell: /usr/bin/zsh
    # password: "{{ mypassword }}"
    # shell: /usr/bin/nologin

- name: users | tg | add sudoers file
  tags: settings,tg,sudo,system,users
  copy:
    src: users/sudoers_tg
    dest: /etc/sudoers.d/tg
    owner: root
    group: root
    mode: 0440

- name: users | tg | create .ssh directory
  tags: dotfiles,tg,ssh,users
  file:
    path: "{{ item.dir }}"
    state: directory
    owner: tg
    group: tg
    mode: 0700
  with_items:
    - { dir: '/home/tg/.ssh' }

- name: users | tg | add public key
  tags: dotfiles,tg,ssh,ssh-keys,users
  authorized_key:
    user: tg
    key: "{{ item }}"
  with_file:
    - users/tg/ssh/tgroch_id_rsa.pub
    # - users/tg/ssh/tg_id_ed25519.pub

- name: Dotfiles - Get home directory
  user:
    name: "{{ username }}"
    state: present
  register: dotfiles_user_registered
  tags: dotfiles,tg,users,barerepo

- name: Dotfiles - Set checkout if undefined
  set_fact:
    dotfiles_checkout: ['/*']
  when: dotfiles_checkout is undefined
  tags: dotfiles,tg,users,barerepo

# The ansible.builtin.git module does not seem to support checking out bare repositories, have to do it with shell commands
- name: Dotfiles - Check if directory exists
  stat:
    path: "{{ repo_dir }}"
  register: repo_directory
  tags: dotfiles,tg,users,barerepo

- name: Dotfiles - Clone repository
  command: "git clone --bare {{ dotfiles_repo }} {{ repo_dir }}"
  become: yes
  become_user: "{{ username }}"
  when: not repo_directory.stat.exists
  tags: dotfiles,tg,users,barerepo

- name: Dotfiles - Enable sparse checkout
  command: "git --git-dir={{ repo_dir }} --work-tree={{ work_dir }} config --local core.sparseCheckout true"
  become: yes
  become_user: "{{ username }}"
  tags: dotfiles,tg,users,barerepo

- name: Dotfiles - Disable showing untracked files
  command: "git --git-dir={{ repo_dir }} --work-tree={{ work_dir }} config --local status.showUntrackedFiles no"
  become: yes
  become_user: "{{ username }}"
  tags: dotfiles,tg,users,barerepo

# Copy the dotfiles_checkout variable into a file for checkout
- name: Dotfiles - Configure Git sparse checkout
  copy:
    dest: "{{ repo_dir }}/info/sparse-checkout"
    content: "{{ dotfiles_checkout | join('\n') }}"
  become: yes
  become_user: "{{ username }}"
  tags: dotfiles,tg,users,barerepo

- name: Dotfiles - Checkout Git repository
  command: "git --git-dir={{ repo_dir }} --work-tree={{ work_dir }} checkout --force" # This will overwrite existing files!
  become: yes
  become_user: "{{ username }}"
  tags: dotfiles,tg,users,barerepo

- name: Dotfiles - Pull Git repository
  command: "git --git-dir={{ repo_dir }} --work-tree={{ work_dir }} pull"
  become: yes
  become_user: "{{ username }}"
  tags: dotfiles,tg,users,barerepo

# - name: Dotfiles - Update submodules
#   command: "git --git-dir={{ repo_dir }} --work-tree={{ work_dir }} -C {{ work_dir }} submodule update --init --recursive {{ item }}" # Git wants to cd into the directory first before using the submodule command
#   become: yes
#   become_user: "{{ username }}"
#   loop: "{{ dotfiles_checkout | map('regex_replace', '^.*\\/\\*', '~/') | list }}" # Recurse through all files/directories and attempt to recursively clone submodules. Just does nothing if there are none. Regex replace /* to ~/ for compatability with dotfiles_checkout.



# # ensure git repositories
# - name: Git | Checkout git bare repository
#   become_user: "{{ username }}"
#   git:
#     repo: "{{ upstream }}"
#     dest: "{{ repo_dir }}"
#     bare: yes
#     update: no
#     track_submodules: yes
#   tags: dotfiles,tg,users,barerepo

# - name: Git | Ensure repository set properly
#   lineinfile: dest={{ repo_dir }}/config
#               regexp="^\s*bare.?="
#               line="    bare = false"
#   tags: dotfiles,tg,users,barerepo

# - name: Git | Ensure proper worktree
#   lineinfile: dest={{ repo_dir }}/config
#               regexp='^\s*worktree.?='
#               line="    worktree = {{ work_dir }}"
#   tags: dotfiles,tg,users,barerepo

# - name: Git | Ensure work dir
#   file: path={{ work_dir }} state=directory
#         mode=0775
#   tags: dotfiles,tg,users,barerepo


# # fetch/checkout
# - name: Git | Fetching new changes
#   shell: chdir={{ repo_dir }} git fetch --prune && git fetch --tags
#   become_user: "{{ username }}"
#   tags: dotfiles,tg,users,barerepo

# # - name: Git | Checkout version
# #   command: "chdir={{ work_dir }} git --git-dir={{ repo_dir }} checkout -f {{ version | default('HEAD') }}"
# #   become_user: "{{ username }}"
# #   tags: dotfiles,tg,users,barerepo

# # - name: Git | Checkout dotfiles updates
# #   command: "chdir={{ work_dir }} git fetch && git checkout master && git merge upstream/master"
# #   become_user: "{{ username }}"
# #   tags: dotfiles,tg,users,barerepo

# # git submodules
# - name: Git | Submodules | Syncing
#   command: chdir={{ work_dir }} git --git-dir={{ repo_dir }} submodule sync
#   become_user: "{{ username }}"
#   tags: dotfiles,tg,users,barerepo,update

# - name: Git | Submodules | Updating
#   command: chdir={{ work_dir }} git --git-dir={{ repo_dir }} submodule update -f --init --recursive
#   become_user: "{{ username }}"
#   tags: dotfiles,tg,users,barerepo,update

# - name: Git | Ensure untracked files are hidden
#   command: chdir={{ work_dir }} git --git-dir={{ repo_dir }} config --local status.showUntrackedFiles no
#   become_user: "{{ username }}"
#   tags: dotfiles,tg,users,barerepo,update

- name: Git | Create symbolic link
  file:
    src: "{{ repo_dir }}"
    dest: "{{ work_dir }}.git"
    owner: "{{ username }}"
    group: "{{ username }}"
    state: link
  become_user: "{{ username }}"
  tags: dotfiles,tg,users,barerepo

